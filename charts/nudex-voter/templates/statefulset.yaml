apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- if .Values.annotations.enabled }}
  annotations: 
  {{- with .Values.annotations }}
   {{- range $key, $value := . }}
    {{- if ne $key "enabled" }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
   {{- end }}
  {{- end }}
  {{- end  }}
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
  namespace: {{.Values.namespace }}
spec:
  serviceName: {{ .Values.appName }}
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  updateStrategy: {{- toYaml .Values.updateStrategy | nindent 3 }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      affinity:
        nodeAffinity: 
            {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ .Values.appName }}-configmap  
      {{- if .Values.mountsecret }}
      {{- if .Values.mountsecret.enable }}
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.mountsecret.secretProviderClass }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- $secretName := .Values.mountsecret.secretName -}}
            {{- range .Values.envFromSecrets }}
            - name: {{ . }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ . }}
            {{- end }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            {{- range .Values.service.ports }}
            - name: {{ .name }}
              containerPort: {{ .targetPort }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: data
              mountPath: /app/db
            # - name: secrets-store-inline
            #   mountPath: "/mnt/secrets-store"
            #   readOnly: true
          resources:
            limits:
              cpu: {{ .Values.appResources.limits.cpu }}
              memory: {{ .Values.appResources.limits.memory }}
            requests:
              cpu: {{ .Values.appResources.requests.cpu }}
              memory: {{ .Values.appResources.requests.memory }}
          livenessProbe: {{- toYaml .Values.livenessProbe | nindent 12}}
          readinessProbe: {{- toYaml .Values.readinessProbe | nindent 12}}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}