apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ .Values.appName }}
        podAntiAffinity: {{ toYaml .Values.affinity.podAntiAffinity | nindent 8 }}
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.envFromSecrets.enabled }}
          envFrom:
          - secretRef:
            name: {{ .Values.appName }}
          {{- end }}
          ports:
            {{- range .Values.service.ports }}
            - containerPort: {{ .targetPort }}
            {{- end }}
          volumeMounts:
            - name: logs
              mountPath: /app/logs/{{ .Values.appName }}
          resources:
            limits:
              cpu: {{ .Values.appResources.limits.cpu }}
              memory: {{ .Values.appResources.limits.memory }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.appLivenessProbe.path }}
              {{- range .Values.service.ports }}
              port: {{ .targetPort }}
              {{- end }}
            initialDelaySeconds: {{ .Values.appLivenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.appLivenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.appLivenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.appReadinessProbe.path }}
              {{- range .Values.service.ports }}
              port: {{ .targetPort }}
               {{- end }}
            initialDelaySeconds: {{ .Values.appReadinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.appReadinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.appReadinessProbe.periodSeconds }}
        - name: filebeat
          image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.tag }}"
          imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
          env:
            - name: APP_NAME
              value: "{{ .Values.appName }}"
            - name: ELASTICSEARCH_HOSTS
              value: "{{ .Values.filebeat_env.ELASTICSEARCH_HOSTS }}"
            - name: LOGSTASH_HOSTS
              value: "{{ .Values.filebeat_env.LOGSTASH_HOSTS }}"
            - name: KIBANA_HOST
              value: "{{ .Values.filebeat_env.KIBANA_HOST }}"
          volumeMounts:
            - name: logs
              mountPath: /app/logs/{{ .Values.appName }}
            - name: {{ .Values.filebeat.configName | default "filebeat-config" }}
              mountPath: /usr/share/filebeat/filebeat.yml
              subPath: filebeat.yml
          resources:
            limits:
              cpu: {{ .Values.filebeatResources.limits.cpu }}
              memory: {{ .Values.filebeatResources.limits.memory }}
      volumes:
        - emptyDir: {}
          name: logs
        - name: config
          configMap:
            name: filebeat-config
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 6 }}
