apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
  namespace: {{.Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  strategy: {{- toYaml .Values.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      affinity:
        nodeAffinity: 
            {{- toYaml .Values.affinity.nodeAffinity | nindent 10 }}
        podAntiAffinity: 
            {{- toYaml .Values.affinity.podAntiAffinity | nindent 10 }}
      containers:
        - name: {{ .Values.appName }}
          {{- if .Values.customArgs.enabled }}
          args:
            {{- range .Values.customArgs.args }}
            {{ . }}
            {{- end }}
          command:
            {{- range.Values.customArgs.command }}
            {{. }}
            {{- end }}
          {{- end }}
          {{- if .Values.env }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.envFromSecrets.enabled }}
          envFrom:
            {{- range .Values.envFromSecrets.secrets }}
            - secretRef:
                name: {{.name | quote }}
            {{- end }}
          {{- end }}
          ports: 
            {{- range.Values.service.ports }}
            - name: {{ .name }}
              containerPort: {{ .targetPort }}
              protocol: {{.protocol }}
            {{- end }}
          volumeMounts:
            - name: logs
              mountPath: /app/logs/{{ .Values.appName }}
          resources:
            limits:
              cpu: {{ .Values.appResources.limits.cpu }}
              memory: {{ .Values.appResources.limits.memory }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        - name: filebeat
          image: "{{ .Values.filebeat.image.repository }}:{{ .Values.filebeat.image.tag }}"
          imagePullPolicy: {{ .Values.filebeat.image.pullPolicy }}
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "{{ .Values.filebeat_env.ELASTICSEARCH_HOSTS }}"
            - name: LOGSTASH_HOSTS
              value: "{{ .Values.filebeat_env.LOGSTASH_HOSTS }}"
            - name: KIBANA_HOST
              value: "{{ .Values.filebeat_env.KIBANA_HOST }}"
          volumeMounts:
            - name: logs
              mountPath: /app/logs/{{ .Values.appName }}
            - name: config
              mountPath: /usr/share/filebeat/filebeat.yml
              subPath: filebeat.yml
          resources:
            limits:
              cpu: {{ .Values.filebeatResources.limits.cpu }}
              memory: {{ .Values.filebeatResources.limits.memory }}
      volumes:
        - emptyDir: {}
          name: logs
        - name: config
          configMap:
            name: {{ .Values.filebeat.configName }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 6 }}
